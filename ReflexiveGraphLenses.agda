{-# OPTIONS --cubical #-}
module ReflexiveGraphLenses where

open import Agda.Primitive public
open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Equiv
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.Path
open import Cubical.Foundations.Univalence
open import Cubical.Foundations.Prelude
open import Cubical.Foundations.HLevels
open import Cubical.Relation.Binary
open import Cubical.Displayed.Base
open import Cubical.Displayed.Subst
open import Cubical.Displayed.Sigma
open import Cubical.Data.Unit
open import Cubical.Data.Sigma

­Юњ«-Univ : Рѕђ РёЊ Рєњ UARel (Type РёЊ) РёЊ
­Юњ«-Univ РёЊ .UARel._РЅЁ_ = _РЅЃ_
­Юњ«-Univ РёЊ .UARel.ua _ _ = isoToEquiv (invIso univalenceIso)

 -- The type of sets.
HSet : Рѕђ РёЊ Рєњ Type (lsuc РёЊ)
HSet РёЊ = ╬Б (Type РёЊ) isSet

­Юњ«-Set : Рѕђ РёЊ Рєњ UARel (HSet РёЊ) (РёЊ-suc РёЊ)
­Юњ«-Set РёЊ .UARel._РЅЁ_ A B = fst A РЅА fst B
­Юњ«-Set РёЊ .UARel.ua (A , _) (B , _) = invEquiv (cong fst , isEmbeddingFst╬БProp (╬╗ X Рєњ isPropIsSet))

­Юњ«р┤░-Set : Рѕђ РёЊ Рєњ DUARel (­Юњ«-Univ РёЊ) (╬╗ X Рєњ isSet X) РёЊ
DUARel._РЅЁр┤░РЪе_РЪЕ_ (­Юњ«р┤░-Set РёЊ) x p y = Unit*
DUARel.uaр┤░ (­Юњ«р┤░-Set РёЊ) x p y = invEquiv (isContrРєњРЅЃUnit* (isPropРєњisContrPathP (╬╗ i Рєњ isPropIsSet) x y))

РѕФ­ЮЊбр┤░-Set : Рѕђ РёЊ Рєњ UARel (HSet РёЊ) РёЊ
РѕФ­ЮЊбр┤░-Set РёЊ = РѕФ (­Юњ«р┤░-Set РёЊ)

­Юњ«р┤░-PtdTyp : Рѕђ РёЊ Рєњ DUARel (­Юњ«-Univ РёЊ) (╬╗ X Рєњ X) РёЊ
­Юњ«р┤░-PtdTyp РёЊ .DUARel._РЅЁр┤░РЪе_РЪЕ_ a e b = equivFun e a РЅА b
­Юњ«р┤░-PtdTyp РёЊ .DUARel.uaр┤░ {A} {B} a e b =
  invEquiv (compEquiv (PathPРЅЃPath _ a b) (compPathlEquiv (sym (ua╬▓ e a))))

­Юњ«р┤░-PtdSet : Рѕђ РёЊ Рєњ DUARel (РѕФ­ЮЊбр┤░-Set РёЊ) (╬╗ X Рєњ (fst X)) РёЊ
­Юњ«р┤░-PtdSet РёЊ .DUARel._РЅЁр┤░РЪе_РЪЕ_ {(A , _)} {(B , _)} a (e , tt*) b = equivFun e a РЅА b
­Юњ«р┤░-PtdSet РёЊ .DUARel.uaр┤░ a (e , tt*) b =
  invEquiv (compEquiv (PathPРЅЃPath _ a b) (compPathlEquiv (sym (ua╬▓ e a))))

­Юњ«р┤░-const : Рѕђ {РёЊA РёЊРЅЁA РёЊB РёЊРЅЁB}
           {A : Type РёЊA} (­Юњ«-A : UARel A РёЊРЅЁA)
           {B : Type РёЊB} (­Юњ«-B : UARel B РёЊРЅЁB)
           Рєњ DUARel ­Юњ«-A (╬╗ _ Рєњ B) РёЊРЅЁB
­Юњ«р┤░-const ­Юњ«-A ­Юњ«-B .DUARel._РЅЁр┤░РЪе_РЪЕ_ b p b' = ­Юњ«-B .UARel._РЅЁ_ b b'
­Юњ«р┤░-const ­Юњ«-A ­Юњ«-B .DUARel.uaр┤░ b p b' = ­Юњ«-B .UARel.ua b b'

­Юњ«р┤░-Magma : Рѕђ РёЊ Рєњ DUARel (РѕФ­ЮЊбр┤░-Set РёЊ) (╬╗ X Рєњ (fst X) Рєњ (fst X) Рєњ (fst X)) РёЊ
DUARel._РЅЁр┤░РЪе_РЪЕ_ (­Юњ«р┤░-Magma РёЊ) {a} РѕўРѓљ p РѕўРѓЊ = Рѕђ (x y : fst a) Рєњ
                                          fst (fst p) (РѕўРѓљ x y) РЅА
                                          РѕўРѓЊ ((fst (fst p)) x) ((fst (fst p)) y)
DUARel.uaр┤░ (­Юњ«р┤░-Magma РёЊ) = {!!}

_├Ќр┤░_ : Рѕђ {РёЊA РёЊРЅЁA РёЊB РёЊРЅЁB РёЊC РёЊРЅЁC}
       {A : Type РёЊA} {­Юњ«-A : UARel A РёЊРЅЁA}
       {B : A Рєњ Type РёЊB} {C : A Рєњ Type РёЊC}
       (­Юњ«р┤░-B : DUARel ­Юњ«-A B РёЊРЅЁB)
       (­Юњ«р┤░-C : DUARel ­Юњ«-A C РёЊРЅЁC)
       Рєњ DUARel ­Юњ«-A (╬╗ a Рєњ B a ├Ќ C a) (РёЊ-max РёЊРЅЁB РёЊРЅЁC)
(­Юњ«р┤░-B ├Ќр┤░ ­Юњ«р┤░-C) .DUARel._РЅЁр┤░РЪе_РЪЕ_ (b , c) e (b' , c') =
  (­Юњ«р┤░-B .DUARel._РЅЁр┤░РЪе_РЪЕ_ b e b') ├Ќ (­Юњ«р┤░-C .DUARel._РЅЁр┤░РЪе_РЪЕ_ c e c')
(­Юњ«р┤░-B ├Ќр┤░ ­Юњ«р┤░-C) .DUARel.uaр┤░ (b , c) e (b' , c') = {!!}

РѕФ­ЮЊбр┤░-PtdSet : Рѕђ РёЊ Рєњ UARel (╬Б (╬Б (Type РёЊ) isSet) (╬╗ X Рєњ fst X)) РёЊ
РѕФ­ЮЊбр┤░-PtdSet РёЊ = РѕФ (­Юњ«р┤░-PtdSet РёЊ)

РѕФ­ЮЊбр┤░-Magma : Рѕђ РёЊ Рєњ UARel (╬Б (╬Б (Type РёЊ) isSet) (╬╗ X Рєњ fst X Рєњ fst X Рєњ fst X)) РёЊ
РѕФ­ЮЊбр┤░-Magma РёЊ = РѕФ (­Юњ«р┤░-Magma РёЊ)

РѕФ­ЮЊбр┤░-PtdSetMagma : Рѕђ РёЊ Рєњ UARel (╬Б (╬Б (Type РёЊ) isSet) (╬╗ X Рєњ fst X ├Ќ (fst X Рєњ fst X Рєњ fst X))) РёЊ
РѕФ­ЮЊбр┤░-PtdSetMagma РёЊ = РѕФ ((­Юњ«р┤░-PtdSet РёЊ) ├Ќр┤░ (­Юњ«р┤░-Magma РёЊ))

­Юњ«р┤░-Monoid' : Рѕђ РёЊ Рєњ DUARel (РѕФ­ЮЊбр┤░-PtdSetMagma РёЊ)
             (╬╗ X Рєњ (Рѕђ x Рєњ (snd (snd X) x (fst (snd X)) РЅА x) ├Ќ
                           (snd (snd X) (fst (snd X)) x РЅА x)) ├Ќ
                           (Рѕђ x y z Рєњ snd (snd X) (snd (snd X) x y) z РЅА snd (snd X) x (snd (snd X) y z))) РёЊ
DUARel._РЅЁр┤░РЪе_РЪЕ_ (­Юњ«р┤░-Monoid' РёЊ) {X} {Y} m e n =
  let
    eРѓЊ = fst e
    eРѓі = fst (snd e)
    eРѕЎ = snd (snd e)
    in
      (Рѕђ x Рєњ PathP (╬╗ i Рєњ {!eРѕЎ ? ?!}) {!!} {!!}) ├Ќ
      (Рѕђ x Рєњ PathP (╬╗ i Рєњ {!!}) {!!} {!!}) ├Ќ
      (Рѕђ x y z Рєњ PathP (╬╗ i Рєњ {!!}) {!!} {!!})
DUARel.uaр┤░ (­Юњ«р┤░-Monoid' РёЊ) = {!!}

­Юњ«р┤░-Monoid : Рѕђ РёЊ Рєњ DUARel (РѕФ­ЮЊбр┤░-Set РёЊ)
  (╬╗ X Рєњ ╬Б[ ptd Рѕѕ (╬╗ Y Рєњ fst Y) X ]
         ╬Б[ op Рѕѕ (╬╗ Y Рєњ (fst Y) Рєњ (fst Y) Рєњ (fst Y)) X ]
         (Рѕђ x Рєњ (op x ptd РЅА x) ├Ќ (op ptd x РЅА x)) ├Ќ
         (Рѕђ x y z Рєњ op (op x y) z РЅА op x (op y z))) РёЊ
(­Юњ«р┤░-Monoid РёЊ DUARel.РЅЁр┤░РЪе x РЪЕ xРѓЂ) xРѓѓ = {!!}
DUARel.uaр┤░ (­Юњ«р┤░-Monoid РёЊ) = {!!}

-- ­Юњ«-PtdSet : Рѕђ РёЊ Рєњ DUARel (­Юњ«-Set РёЊ) (╬╗ X Рєњ fst X) (РёЊ-suc РёЊ)
-- (­Юњ«-PtdSet РёЊ DUARel.РЅЁр┤░РЪе A РЪЕ AРЅЃB) B = transport {!AРЅЃB!} {!!}
-- DUARel.uaр┤░ (­Юњ«-PtdSet РёЊ) = {!!}
